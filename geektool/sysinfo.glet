<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Command</key>
	<string>#!/bin/zsh

function color() {
	if [[ $2 = "reverse" ]]
	then
		if [[ $1 -lt 11 ]]
		then
			# red
			echo 31
		elif [[ $1 -lt 31 ]]
		then
			# yellow
			echo 33
		else
			# green
			echo 32
		fi
	else
		if [[ $1 -lt 71 ]]
		then
			echo 32
		elif [[ $1 -lt 91 ]]
		then
			echo 33
		else
			echo 31
		fi
	fi
}

function line() {
	echo -n "${(r:16:: :)${1}}"
	typeset -i a=9
	while [ $a -lt $2 ]
	do
		echo "\033[2;$(color $2 $3)m▇\033[0m\c"
		a=`expr $a + 7`
	done
	#echo "\033[1;39m█\033[0m\c"
	while [ $a -lt 100 ]
	do
		echo "\033[2;30m▇\033[0m\c"
		a=`expr $a + 7`
	done
	if [[ $4 != "" ]]
	then
		if [[ $5 != "" ]]
		then
			echo "\033[2;$5m${(l:6:: :)${4}}\033[0m"
		else
			echo "${(l:6:: :)${4}}"
		fi
	else
		echo "${(l:5:: :)${2}}%"
	fi
}

function cpu_memory() {
	tmp="/tmp/memory.lst"
	rm $tmp
	top -l 1 &gt; $tmp

	# CPU usage
	myCPU=`cat $tmp | awk '/CPU usage/ {print $3}' | sed s/%//`
	myCPU=`echo "tmp=$myCPU; tmp /= 1; tmp" | bc`
	line "CPU Usage" $myCPU

	# Memory usage
	myUsedMem=`cat $tmp | awk '/PhysMem/ {print $8}' | sed s/M// `
	myFreeMem=`cat $tmp | awk '/PhysMem/ {print $10}' | sed s/M// `
	myActiveMem=`cat $tmp | awk '/PhysMem/ {print $4}' | sed s/M// `
	myTotalMem=` expr $myUsedMem + $myFreeMem`
	#myUsedPer=`echo |awk '{print f / t * 100}' f=$myActiveMem t=$myTotalMem`
	#myUsedPer=`echo "tmp=$myUsedPer; tmp /= 1; tmp" | bc`
	myUsedPer=`echo $myActiveMem $myTotalMem | awk '{print int($1/$2*100)}'`
	line "Memory Usage" $myUsedPer
}

function hours_minutes() {
	# Changes minutes to h:mm format
	let "hours = $1 / 60"
	let "minutes = $1 % 60"
	echo $hours:${(l:2::0:)${minutes}}
}

function battery() {
	# Battery charge level and status
	tmp="/tmp/battery.lst"
	rm $tmp
	ioreg -l | grep "\-o AppleSmartBattery" -A 100 &gt; $tmp

	bat=`grep Capacity $tmp | tr '\n' ' | ' | awk '{print int($10/$5*100)}'`
	time=`grep -i timeremaining $tmp | awk '{print $5}'`
	hm=`hours_minutes $time`
	charged=`grep -i fullycharged $tmp | awk '{print $5}'`
	connected=`grep -i externalconnected $tmp | awk '{print $5}'`
	if [[ $connected = "Yes" ]]
	then
		if [[ $charged = "Yes" ]]
		then
			line "System Battery" 100 reverse full
		else
			line "System Battery" $bat reverse $hm 32
		fi
	else
		line "System Battery" $bat reverse $hm
	fi

	# Battery health
	health=`grep Capacity $tmp | tr '\n' ' | ' | awk '{print int($5/$21*100)}'`
	typeset -i b=9
	line "Battery Health" $health reverse
}

function disks() {
	# Disks
	rm /tmp/disks.lst
	#getting disks..due to better handling with awk it creates a file
	df -H | grep -vE '^Filesystem|tmpfs|cdrom|devfs|map|disk2' | awk '{ print $1 " " $5 }' &gt;&gt; /tmp/disks.lst
	#how many disks do we have?
	count=`wc -l /tmp/disks.lst|awk '{print $1}'`
	for ((i=1;i &lt;= $count;i++))
	do
		currname=`awk -v i=$i 'NR==i' /tmp/disks.lst|awk '{print $1}'`
		currp=`awk -v i=$i 'NR==i' /tmp/disks.lst|awk '{print $2}'|cut -d'%' -f1`
		line $currname $currp
	done
}

cpu_memory
battery
disks

#
</string>
	<key>DisplayStatusImage</key>
	<false/>
	<key>DropShadow</key>
	<false/>
	<key>FailureImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgAAQFYGBYWqyso
	KOExLy/9Kygo4RgWFqoAAQFXAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	BgZ8Rz4+8qWXl//c09P/6+Tl/93T0/+ll5f/Rz4+8gYGBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAQHAgJkSS0t9Kt9ff/ct7j/7NHS/+7T0//s0dL/3be4/6t9ff9JLS30BwIC
	ZQAAAAUAAAAA////AAAAAAAAAAAmLhAQzJA+P/+1TEv/xmNe/8twav/LcGr/y3Bq/8Zj
	Xf+0TEv/kD4//y4QEMwAAAAmAAAAAP///wAAAAAABgAATmAZGvitMi//uSwh/8E+Mf/H
	TED/yU9D/8hNQP/DPjL/uiwi/64xL/9gGRr4BwAATQAAAAD///8AAAAAARUAAGiJGBr/
	wzgx/8tCNP/TV0n/3WZa/+BqXf/eaFr/1VhL/85DNP/GOTL/ihga/xYAAGcAAAAB////
	AAAAAAkYAABslRoW/9JNQP/dYFL/63Jm//KAdv/2hXv/9IF3/+10Zv/gYVP/1k5B/5Ya
	Fv8YAABrAAAACP///wAAAAANDAAAY4UZEu/iXU3/8Hhr//yFef/+lYn//puP//+Xiv/8
	h3r/8Xlr/+ZdTv+HGRLwDQAAZAAAAAv///8AAAAADwAAAE5aDAfL4FZI//6LgP//mI7/
	/qSY//+rnv/+p5r//5qP//+Ngf/nWEn/Ww0HywAAAE0AAAAN////AAAAAAwAAAAyDwAA
	jJInH+z/gHL//6qe//+4rP//vrL//7uu//+soP//g3X/lioh7BEAAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF0dAACpkTUq6dt2Z/z6n5D//7Sj//qhkv/bd2r8kTYr6R4AAKoA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAyAAAAZwYAAKI0DgrIYi4l2XlANeJiLiXZ
	NA4KxwYAAKEAAABoAAAAMwAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	fAAAAI8AAACVAAAAjgAAAHsAAABbAAAANAAAABIAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEUAAAA2AAAAIgAAAA4AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAARAAAACwAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>FontFamily</key>
	<string>Courier-Bold</string>
	<key>FontSize</key>
	<real>14</real>
	<key>GeekletFrame</key>
	<string>{{53, 678}, {482, 175}}</string>
	<key>HasShadow</key>
	<false/>
	<key>Identifier</key>
	<string>org.tynsoe.geeklet.shell</string>
	<key>Name</key>
	<string>SysInfo</string>
	<key>RefreshInterval</key>
	<integer>60</integer>
	<key>SetLocale</key>
	<true/>
	<key>SuccessImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgBAQFYFhUWqygn
	KOEvLi/9KCco4RYVFqsBAQFYAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	AwZ8Pj0+8peYl//S0tP/4+Tl/9LS0/+XmJf/Pj0+8gYDBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAUDAQJlLTEt9HqRff+40Ln/1efT/9jo1f/V59P/uNG5/3qRff8tMS30AwEC
	ZQAAAAUAAAAA////AAAAAAAAAAAmEBYQyz1tP/9Xm03/eLJX/4e6YP+HuWL/h7pg/3ix
	V/9Wmk3/PWw//xAWEMsAAAAmAAAAAP///wAAAAAAAAAAThY8Gvc8jjD/TJwb/2CnHf9r
	ryz/bLEv/2ywLP9iqR7/TJ4b/zyQMP8WPBr3AAAATQAAAAD///8AAAAAAQAIAGgeYRv/
	VaUq/2WvIP91uzb/gsZI/4bIS/+DyEj/d743/2exIP9WqSr/HmIb/wAIAGcAAAAB////
	AAAAAAgADABsJ3MY/3C6Nv9/xz3/kNNT/57dYv+i32f/n99k/5HWVP+AyD3/cr02/yd0
	GP8ADQBsAAAACf///wAAAAAMAAYAYydqEPB/yD7/lNhW/6PlZv+x8Xb/uPd8/7P0eP+k
	6Gf/ldpX/4DLQP8maxDvAAYAYwAAAAv///8AAAAADwAAAE4XRwXLd8Y5/6foa/+393v/
	wv6F/8r/i//F/4b/uPt8/6rubP95yTr/F0kFygAAAEwAAAAN////AAAAAAwAAAAyAAwA
	jEB6GOyh7Vz/yP+J/9X/mP/b/5//2P+b/83/i/+m9F3/Qn4X7AEMAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF4GFQCpTIQc6ZbZU/zC+3n/2P+L/8T6fP+a21b8UIkd6AYXAKkA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAzAAAAZwAFAKIaMwTHQGIZ2FV5JuFAYhnZ
	GzQEyAAFAKAAAABnAAAAMgAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	ewAAAI8AAACWAAAAjwAAAHsAAABcAAAAMwAAABEAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEcAAAA2AAAAIQAAAA0AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAASAAAADAAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>TextAlignment</key>
	<integer>0</integer>
	<key>TextColor</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMBhARm
	ZmZmAQEBAYY=
	</data>
	<key>TextStrikethrough</key>
	<integer>0</integer>
	<key>TextUnderline</key>
	<integer>0</integer>
</dict>
</plist>
