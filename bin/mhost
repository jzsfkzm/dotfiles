#!/usr/local/bin/php
<?php

class Hoster {
	private $file = '/etc/hosts';

	private $host = null;

	private $ip = null;

	public function __construct($argv) {
		try {
			$this->checkArgs($argv);

			$this->host = $argv[1];
			if (isset($argv[2])) {
				$this->ip = array(
					$argv[2]
				);
			}

			if ($this->check($this->host) === true) {
				$this->remove($this->host, $this->ip);
			} else {
				$this->add($this->host, $this->ip);
			}
		} catch (Exception $e) {
			echo $e->getMessage();
		}
	}

	private function usage() {
		return "Usage: mhost [hostname] [(ip)]";
	}

	private function checkArgs($argv) {
		if (count($argv) < 2) {
			throw new Exception($this->usage());
		}
	}

	private function add($host, $ip) {
		if ($ip == null) {
			$ip = array(
				"::1",
				"127.0.0.1",
			);
		}

		if (is_array($ip)) {
			$comment = sprintf("# %s added by mhost at %s\n", $host, date('Y-m-d H:i:s'));
			error_log($comment, 3, $this->file);
			foreach ($ip as $ipItem) {
				$this->add($host, $ipItem);
			}
			error_log($comment, 3, $this->file);
		} else {
			$line = sprintf("%s %s\n", str_pad($ip, 16), $host);
			printf("Adding %s", $line);
			error_log($line, 3, $this->file);
		}
	}

	private function remove($host) {
		$lines = file($this->file);
		$isOn = false;
		$newlines = array();

		foreach ($lines as $line) {
			$triggerPattern = "/# " . $host . " added/";
			if (preg_match($triggerPattern, $line)) {
				$isOn = !$isOn;
			}

			if (preg_match($triggerPattern, $line) || $isOn === true) {
				printf("Removing %s", $line);
			} else {
				$newlines[] = $line;
			}
		}

		file_put_contents($this->file, join("", $newlines));
	}

	private function check($host) {
		$lines = file($this->file);
		foreach ($lines as $line) {
			$pattern = "/(.*)\s" . $host . "/";
			if (preg_match($pattern, $line)) {
				return true;
			}
		}

		return false;
	}
}

$hoster = new Hoster($argv);
